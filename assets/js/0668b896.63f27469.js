(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{68:function(e,t,s){"use strict";s.r(t),s.d(t,"frontMatter",(function(){return o})),s.d(t,"metadata",(function(){return a})),s.d(t,"toc",(function(){return l})),s.d(t,"default",(function(){return p}));var n=s(3),r=s(8),i=(s(0),s(96)),o={title:"Installation",slug:"/nestjs"},a={unversionedId:"nestjs/installation",id:"nestjs/installation",isDocsHomePage:!1,title:"Installation",description:"GraphQL-Utils also offers a NestJS \ud83d\udd25 integration for all the utilities outlined in this documentation to make the code shorter and more intuitive in this framework.",source:"@site/docs/nestjs/installation.md",slug:"/nestjs",permalink:"/graphql-utils/docs/nestjs",editUrl:"https://github.com/jenyus-org/graphql-utils/edit/master/docs/docs/nestjs/installation.md",version:"current",sidebar:"docsSidebar",previous:{title:"Utilities",permalink:"/graphql-utils/docs/reference/utilities"},next:{title:"Decorators",permalink:"/graphql-utils/docs/nestjs/decorators"}},l=[{value:"Usage",id:"usage",children:[]}],c={toc:l};function p(e){var t=e.components,s=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,s,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"GraphQL-Utils also offers a NestJS \ud83d\udd25 integration for all the utilities outlined in this documentation to make the code shorter and more intuitive in this framework."),Object(i.b)("p",null,"The NestJS package can be installed with ",Object(i.b)("inlineCode",{parentName:"p"},"npm"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ npm i @jenyus-org/nestjs-graphql-utils --save\n")),Object(i.b)("p",null,"Or ",Object(i.b)("inlineCode",{parentName:"p"},"yarn"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @jenyus-org/nestjs-graphql-utils\n")),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("p",null,"The most intuitive way to use the NestJS package is with the ",Object(i.b)("inlineCode",{parentName:"p"},"@Selections()")," decorator. It supports the same options as ",Object(i.b)("a",{parentName:"p",href:"/graphql-utils/docs/recipes/resolving-selections"},Object(i.b)("inlineCode",{parentName:"a"},"resolveSelections()"))," and also a shorthand, where the first parameter is the parent field, and the second is an array of selections:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},'import { Selections } from "@jenyus-org/nestjs-graphql-utils";\nimport { Parent, Query, ResolveField, Resolver } from "@nestjs/graphql";\nimport { UserObject } from "../users/dto/user.object";\nimport { UsersService } from "../users/users.service";\nimport { PostObject } from "./dto/post.object";\nimport { Post } from "./entities/post.entity";\nimport { PostsService } from "./posts.service";\n\n@Resolver(() => PostObject)\nclass PostsResolver {\n  constructor(\n    private postsService: PostsService,\n    private usersService: UsersService\n  ) {}\n\n  @Query(() => [PostObject])\n  posts(\n    @Selections("posts", ["**.**"])\n    relations: string[],\n    @Selections("posts", ["*."]) fields: string[]\n  ) {\n    return await this.postsService.findAll({ relations, fields });\n  }\n\n  @ResolveField(() => UserObject)\n  async author(@Parent() post: Post) {\n    if (post.author) {\n      return post.author;\n    }\n    return await this.usersService.findOne({ postId: post.id });\n  }\n}\n')))}p.isMDXComponent=!0}}]);