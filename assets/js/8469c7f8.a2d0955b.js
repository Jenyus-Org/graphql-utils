(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{80:function(e,t,s){"use strict";s.r(t),s.d(t,"frontMatter",(function(){return l})),s.d(t,"metadata",(function(){return c})),s.d(t,"toc",(function(){return p})),s.d(t,"default",(function(){return d}));var n=s(3),o=s(8),i=(s(0),s(96)),r=s(100),a=s(99),l={title:"Installation",slug:"/nestjs"},c={unversionedId:"nestjs/installation",id:"nestjs/installation",isDocsHomePage:!1,title:"Installation",description:"GraphQL-Utils also offers a NestJS \ud83d\udd25 integration for all the utilities outlined in this documentation to make the code shorter and more intuitive in this framework.",source:"@site/docs/nestjs/installation.mdx",slug:"/nestjs",permalink:"/graphql-utils/docs/nestjs",editUrl:"https://github.com/jenyus-org/graphql-utils/edit/master/docs/docs/nestjs/installation.mdx",version:"current",sidebar:"docsSidebar",previous:{title:"Utilities",permalink:"/graphql-utils/docs/reference/utilities"},next:{title:"Decorators",permalink:"/graphql-utils/docs/nestjs/decorators"}},p=[{value:"Usage",id:"usage",children:[]}],u={toc:p};function d(e){var t=e.components,s=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},u,s,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"GraphQL-Utils also offers a NestJS \ud83d\udd25 integration for all the utilities outlined in this documentation to make the code shorter and more intuitive in this framework."),Object(i.b)("p",null,"The NestJS package can be installed with ",Object(i.b)("inlineCode",{parentName:"p"},"npm"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ npm i @jenyus-org/nestjs-graphql-utils --save\n")),Object(i.b)("p",null,"Or ",Object(i.b)("inlineCode",{parentName:"p"},"yarn"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @jenyus-org/nestjs-graphql-utils\n")),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("p",null,"The most intuitive way to use the NestJS package is with the ",Object(i.b)("inlineCode",{parentName:"p"},"@Selections()")," decorator. It supports the same options as ",Object(i.b)("a",{parentName:"p",href:"/graphql-utils/docs/recipes/resolving-selections"},Object(i.b)("inlineCode",{parentName:"a"},"resolveSelections()"))," and also a shorthand, where the first parameter is the parent field, and the second is an array of selections:"),Object(i.b)(r.a,{funcs:[function(e){return Object(a.resolveSelections)([{field:"posts",selections:["**.**"]}],e)},function(e){return Object(a.resolveSelections)([{field:"posts",selections:["*."]}],e)}],graphql:"\n  {\n    posts {\n      id\n      title\n      body\n      author {\n        id\n        username\n        firstName\n        lastName\n      }\n    }\n  }\n  ",code:'\n  import { Selections } from "@jenyus-org/nestjs-graphql-utils";\n  import { Parent, Query, ResolveField, Resolver } from "@nestjs/graphql";\n  import { UserObject } from "../users/dto/user.object";\n  import { UsersService } from "../users/users.service";\n  import { PostObject } from "./dto/post.object";\n  import { Post } from "./entities/post.entity";\n  import { PostsService } from "./posts.service";\n  \n\n  @Resolver(() => PostObject)\n  class PostsResolver {\n    constructor(\n      private postsService: PostsService,\n      private usersService: UsersService\n    ) {}\n    \n\n    @Query(() => [PostObject])\n    posts(\n      @Selections("posts", ["**.**"])\n      relations: string[],\n      @Selections("posts", ["*."]) fields: string[]\n    ) {\n      return await this.postsService.findAll({ relations, fields });\n    }\n    \n\n    @ResolveField(() => UserObject)\n    async author(@Parent() post: Post) {\n      if (post.author) {\n        return post.author;\n      }\n      return await this.usersService.findOne({ postId: post.id });\n    }\n  }\n  ',mdxType:"Sandbox"}))}d.isMDXComponent=!0}}]);