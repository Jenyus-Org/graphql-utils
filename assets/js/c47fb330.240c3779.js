(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{87:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return d})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return b}));var i=t(3),s=t(8),o=(t(0),t(96)),a=t(100),r=t(99),l={title:"Decorators"},d={unversionedId:"nestjs/decorators",id:"nestjs/decorators",isDocsHomePage:!1,title:"Decorators",description:"hasFields,",source:"@site/docs/nestjs/decorators.mdx",slug:"/nestjs/decorators",permalink:"/graphql-utils/docs/nestjs/decorators",editUrl:"https://github.com/jenyus-org/graphql-utils/edit/master/docs/docs/nestjs/decorators.mdx",version:"current",sidebar:"docsSidebar",previous:{title:"Installation",permalink:"/graphql-utils/docs/nestjs"}},c=[{value:"<code>@FieldMap(deep: boolean = true, parent: string | string[] = []): FieldMap</code>",id:"fieldmapdeep-boolean--true-parent-string--string---fieldmap",children:[]},{value:"<code>@FieldNodeAt(path: string | string[]): FieldNode | undefined</code>",id:"fieldnodeatpath-string--string-fieldnode--undefined",children:[]},{value:"<code>@Fields(deep: boolean = true, parent: string | string[] = []): string[]</code>",id:"fieldsdeep-boolean--true-parent-string--string---string",children:[]},{value:"<code>@HasFields(...fields: (string | string[])[]): boolean</code>",id:"hasfieldsfields-string--string-boolean",children:[]},{value:"<code>@Selections(fieldSelections: string | string[] | FieldSelections[], fields?: string[], asParent: boolean = true): string[]</code>",id:"selectionsfieldselections-string--string--fieldselections-fields-string-asparent-boolean--true-string",children:[]}],p={toc:c};function b(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Overview of the decorators provided by the ",Object(o.b)("inlineCode",{parentName:"p"},"@jenyus-org/nestjs-graphql-utils")," package."),Object(o.b)("h2",{id:"fieldmapdeep-boolean--true-parent-string--string---fieldmap"},Object(o.b)("inlineCode",{parentName:"h2"},"@FieldMap(deep: boolean = true, parent: string | string[] = []): FieldMap")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"New in v1.4.0")),Object(o.b)("p",null,"This decorator wraps the ",Object(o.b)("inlineCode",{parentName:"p"},"resolveFieldMap")," utility from ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-utils")," including the direct passing of arguments fed to the decorator. It returns a raw ",Object(o.b)("inlineCode",{parentName:"p"},"FieldMap")," instance which takes on the form of nested objects, where the keys represent the selected fields from the ",Object(o.b)("inlineCode",{parentName:"p"},"GraphQLResolveInfo"),". Keys with no sub-selections are assigned an empty object as their value."),Object(o.b)(a.a,{func:function(e){return Object(r.resolveFieldMap)(e)},graphql:"\n  {\n    posts {\n      id\n      title\n      body\n      author {\n        id\n        username\n        firstName\n        lastName\n      }\n      comments {\n        id\n        body\n        author {\n          id\n          username\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n  ",code:"\n  @Query(() => [PostObject])\n  async posts(\n    @FieldMap() fieldMap: FieldMap,\n  ) {\n    console.log(fieldMap);\n  }\n  ",mdxType:"Sandbox"}),Object(o.b)("h2",{id:"fieldnodeatpath-string--string-fieldnode--undefined"},Object(o.b)("inlineCode",{parentName:"h2"},"@FieldNodeAt(path: string | string[]): FieldNode | undefined")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"New in v1.5.0")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"@FieldNodeAt")," wraps the ",Object(o.b)("inlineCode",{parentName:"p"},"getFieldNode()")," utility from ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-utils"),", which takes a path and then tries to find a field node at the specified location in the ",Object(o.b)("inlineCode",{parentName:"p"},"GraphQLResolveInfo"),". If none was found, ",Object(o.b)("inlineCode",{parentName:"p"},"undefined")," is returned instead."),Object(o.b)("h2",{id:"fieldsdeep-boolean--true-parent-string--string---string"},Object(o.b)("inlineCode",{parentName:"h2"},"@Fields(deep: boolean = true, parent: string | string[] = []): string[]")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"New in v1.4.0")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"@Fields")," is a wrapper over the ",Object(o.b)("inlineCode",{parentName:"p"},"resolveFields")," utility from ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-utils"),", which itself is a light wrapper of the ",Object(o.b)("inlineCode",{parentName:"p"},"resolveFieldMaps")," utility that remaps the ",Object(o.b)("inlineCode",{parentName:"p"},"FieldMap")," return by the function with ",Object(o.b)("inlineCode",{parentName:"p"},"fieldMapToDot"),"."),Object(o.b)("p",null,"Instead of returning a ",Object(o.b)("inlineCode",{parentName:"p"},"FieldMap")," result, it returns a ",Object(o.b)("inlineCode",{parentName:"p"},"string[]")," which are a list of all the requested fields in dot notation."),Object(o.b)(a.a,{func:function(e){return Object(r.resolveFields)(e)},graphql:"\n  {\n    posts {\n      id\n      title\n      body\n      author {\n        id\n        username\n        firstName\n        lastName\n      }\n      comments {\n        id\n        body\n        author {\n          id\n          username\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n  ",code:"\n  @Query(() => [PostObject])\n  async posts(\n    @Fields() fields: string[],\n  ) {\n    console.log(fields);\n  }\n  ",mdxType:"Sandbox"}),Object(o.b)("h2",{id:"hasfieldsfields-string--string-boolean"},Object(o.b)("inlineCode",{parentName:"h2"},"@HasFields(...fields: (string | string[])[]): boolean")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"@HasFields()")," uses the received ",Object(o.b)("inlineCode",{parentName:"p"},"GraphQLResolveInfo")," from the incoming request, to run ",Object(o.b)("a",{parentName:"p",href:"/graphql-utils/docs/reference/utilities#hasfieldsinfo-graphqlresolveinfo-search-string--string-atroot-boolean--false-boolean"},Object(o.b)("inlineCode",{parentName:"a"},"hasFields"))," for every argument passed. Just like ",Object(o.b)("inlineCode",{parentName:"p"},"hasFields")," it supports array syntax and dot notation, and uses AND bitwise operations ensuring that every field passed resolves to ",Object(o.b)("inlineCode",{parentName:"p"},"true"),"."),Object(o.b)(a.a,{func:function(e){return Object(r.hasFields)(e,"posts.id")},graphql:"\n  {\n    posts {\n      id\n      title\n      body\n      author {\n        id\n        username\n        firstName\n        lastName\n      }\n      comments {\n        id\n        body\n      }\n    }\n  }\n  ",code:'\n  @Query(() => [PostObject])\n  async posts(\n    @HasFields("posts.id") wantsId: boolean,\n  ) {\n    console.log(wantsId);\n  }\n  ',mdxType:"Sandbox"}),Object(o.b)("h2",{id:"selectionsfieldselections-string--string--fieldselections-fields-string-asparent-boolean--true-string"},Object(o.b)("inlineCode",{parentName:"h2"},"@Selections(fieldSelections: string | string[] | FieldSelections[], fields?: string[], asParent: boolean = true): string[]")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Updated in v1.6.0")),Object(o.b)("p",null,"Similar to ",Object(o.b)("inlineCode",{parentName:"p"},"@HasFields()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"@Selections")," acts as a layer on top of ",Object(o.b)("a",{parentName:"p",href:"/graphql-utils/docs/reference/utilities#resolveselectionsfields-string--fieldselections-info-graphqlresolveinfo-string"},Object(o.b)("inlineCode",{parentName:"a"},"resolveSelections")),", and additionally contains some logic to solve the most common use-case."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"fieldSelections")," can be the same type of argument as accepted by ",Object(o.b)("inlineCode",{parentName:"p"},"resolveSelections"),", and will return an array of selectors which were found in the query."),Object(o.b)("p",null,"Additionally, instead of passing the field selection array, users may pass a simple string, acting as the root object for subsequent fields. In this case the second argument, ",Object(o.b)("inlineCode",{parentName:"p"},"fields")," is required, and must be an array of strings to search within the parent selector."),Object(o.b)(a.a,{func:function(e){return Object(r.resolveSelections)([{field:"posts",selections:["author","comments"]}],e)},graphql:"\n  {\n    posts {\n      id\n      title\n      body\n      author {\n        id\n        username\n        firstName\n        lastName\n      }\n      comments {\n        id\n        body\n      }\n    }\n  }\n  ",code:'\n  @Query(() => [PostObject])\n  async posts(\n    @Selections("posts", ["author", "comments"]) fieldSelections: string[]\n  ) {\n    console.log(fieldSelections);\n  }\n  ',mdxType:"Sandbox"}),Object(o.b)("p",null,"A final argument that may be specified, ",Object(o.b)("inlineCode",{parentName:"p"},"withParent"),", allows ",Object(o.b)("inlineCode",{parentName:"p"},"@Selections()")," to automatically remap the fields specified in the second argument and prepend them with the parent. This can be useful to do more fine-grained checks, especially when searching for subselection of relationships like so:"),Object(o.b)(a.a,{func:function(e){return Object(r.resolveSelections)(["posts.comments"],e)},graphql:"\n  {\n    posts {\n      id\n      title\n      body\n      comments {\n        id\n        body\n      }\n    }\n  }\n  ",code:'\n  @Query(() => [PostObject])\n  async posts(\n    @Selections("posts", ["comments"], true) fieldSelections: string[]\n  ) {\n    console.log(fieldSelections);\n  }\n  ',mdxType:"Sandbox"}))}b.isMDXComponent=!0}}]);