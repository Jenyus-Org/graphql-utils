(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{76:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return a})),t.d(n,"toc",(function(){return r})),t.d(n,"default",(function(){return p}));var i=t(3),o=t(8),s=(t(0),t(89)),l={title:"Resolving Selections For Use With ORMs"},a={unversionedId:"recipes/resolving-selections",id:"recipes/resolving-selections",isDocsHomePage:!1,title:"Resolving Selections For Use With ORMs",description:"In addition to parsing field maps and checking if a field selection was made, GraphQL-Utils also offers a very powerful utility to directly retrieve an array of fields that were selected, to make working with popular ORMs much easier.",source:"@site/docs/recipes/resolving-selections.md",slug:"/recipes/resolving-selections",permalink:"/graphql-utils/docs/recipes/resolving-selections",editUrl:"https://github.com/jenyus-org/graphql-utils/edit/master/docs/docs/recipes/resolving-selections.md",version:"current",sidebar:"docsSidebar",previous:{title:"Checking For Fields To Do Conditional JOINs",permalink:"/graphql-utils/docs/recipes/checking-for-fields"},next:{title:"Interfaces",permalink:"/graphql-utils/docs/reference/interfaces"}},r=[{value:"Wildcards",id:"wildcards",children:[{value:"<code>*</code>",id:"",children:[]},{value:"<code>*.*</code>",id:"-1",children:[]},{value:"<code>**</code>",id:"-2",children:[]},{value:"<code>**.**</code>",id:"-3",children:[]},{value:"<code>*.</code>",id:"-4",children:[]}]},{value:"Usage with MikroORM",id:"usage-with-mikroorm",children:[]}],c={toc:r};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(i.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"In addition to parsing field maps and checking if a field selection was made, GraphQL-Utils also offers a very powerful utility to directly retrieve an array of fields that were selected, to make working with popular ORMs much easier."),Object(s.b)("p",null,"We can use the ",Object(s.b)("inlineCode",{parentName:"p"},"resolveSelections")," utility to have it check, if certain fields were requested in the query, and return those to us in array form, like so:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-ts"},'import { resolveSelections, FieldSelections } from "@jenyus-org/graphql-utils";\n\nconst resolvers = {\n  Query: {\n    posts(_, __, ___, info) {\n      const fields: FieldSelections[] = [\n        {\n          field: "posts",\n          selections: ["author"],\n        },\n      ];\n\n      const selections = resolveSelections(fields, info);\n\n      console.log(selections);\n    },\n  },\n};\n')),Object(s.b)("p",null,"Given the following query:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-graphql"},"{\n  posts {\n    id\n    title\n    body\n    author {\n      id\n      username\n      firstName\n      lastName\n    }\n  }\n}\n")),Object(s.b)("p",null,"Our above code will log the following:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'["author"]\n')),Object(s.b)("p",null,"Important to understand with ",Object(s.b)("inlineCode",{parentName:"p"},"resolveSelections()")," is it will only return fields with the ",Object(s.b)("inlineCode",{parentName:"p"},"selector")," property, or ",Object(s.b)("inlineCode",{parentName:"p"},"selections")," passed as strings. So it won't return ",Object(s.b)("inlineCode",{parentName:"p"},"posts"),", and will simply make sure it's the parent of subselections."),Object(s.b)("p",null,"If you want to have ",Object(s.b)("inlineCode",{parentName:"p"},"posts")," returned as well, you may specify its ",Object(s.b)("inlineCode",{parentName:"p"},"selector")," property like so:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-ts"},'import { resolveSelections, FieldSelections } from "@jenyus-org/graphql-utils";\n\nconst resolvers = {\n  Query: {\n    posts(_, __, ___, info) {\n      const fields: FieldSelections[] = [\n        {\n          field: "posts",\n          selector: "posts",\n          selections: ["author"],\n        },\n      ];\n\n      const selections = resolveSelections(fields, info);\n\n      console.log(selections);\n    },\n  },\n};\n')),Object(s.b)("p",null,"This will log the following:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'["posts", "author"]\n')),Object(s.b)("h2",{id:"wildcards"},"Wildcards"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"resolveSelections()")," also supports wildcards, to select fields under a given parent dynamically. This lets GraphQL-Utils handle all the logic to e.g. only retrieve fields with or without subselections, as well as handle deeper trees."),Object(s.b)("h3",{id:""},Object(s.b)("inlineCode",{parentName:"h3"},"*")),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"*")," wildcard is very simple, it will select all the fields under a given parent:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-ts"},'import { resolveSelections, FieldSelections } from "@jenyus-org/graphql-utils";\n\nconst resolvers = {\n  Query: {\n    posts(_, __, ___, info) {\n      const fields: FieldSelections[] = [\n        {\n          field: "posts",\n          selections: ["*"],\n        },\n      ];\n\n      const selections = resolveSelections(fields, info);\n\n      console.log(selections);\n    },\n  },\n};\n')),Object(s.b)("p",null,"This will log the following:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'["id", "title", "body", "author"]\n')),Object(s.b)("h3",{id:"-1"},Object(s.b)("inlineCode",{parentName:"h3"},"*.*")),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"*.*")," works similar to ",Object(s.b)("inlineCode",{parentName:"p"},"*"),", but goes to unlimited depths:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-ts"},'import { resolveSelections, FieldSelections } from "@jenyus-org/graphql-utils";\n\nconst resolvers = {\n  Query: {\n    posts(_, __, ___, info) {\n      const fields: FieldSelections[] = [\n        {\n          field: "posts",\n          selections: ["*.*"],\n        },\n      ];\n\n      const selections = resolveSelections(fields, info);\n\n      console.log(selections);\n    },\n  },\n};\n')),Object(s.b)("p",null,"This will log the following:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'[\n  "id",\n  "title",\n  "body",\n  "author",\n  "author.id",\n  "author.username",\n  "author.firstName",\n  "author.lastName"\n]\n')),Object(s.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(s.b)("div",{parentName:"div",className:"admonition-heading"},Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",{parentName:"h5",className:"admonition-icon"},Object(s.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(s.b)("div",{parentName:"div",className:"admonition-content"},Object(s.b)("p",{parentName:"div"},"The ",Object(s.b)("inlineCode",{parentName:"p"},"*.*")," wildcard can be useful to calculate the cost of a given query."))),Object(s.b)("h3",{id:"-2"},Object(s.b)("inlineCode",{parentName:"h3"},"**")),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"**")," just like ",Object(s.b)("inlineCode",{parentName:"p"},"*")," only works one-level deep, but only looks for fields with subselections:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-ts"},'import { resolveSelections, FieldSelections } from "@jenyus-org/graphql-utils";\n\nconst resolvers = {\n  Query: {\n    posts(_, __, ___, info) {\n      const fields: FieldSelections[] = [\n        {\n          field: "posts",\n          selections: ["**"],\n        },\n      ];\n\n      const selections = resolveSelections(fields, info);\n\n      console.log(selections);\n    },\n  },\n};\n')),Object(s.b)("p",null,"This will log the following:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'["author"]\n')),Object(s.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(s.b)("div",{parentName:"div",className:"admonition-heading"},Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",{parentName:"h5",className:"admonition-icon"},Object(s.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(s.b)("div",{parentName:"div",className:"admonition-content"},Object(s.b)("p",{parentName:"div"},"The ",Object(s.b)("inlineCode",{parentName:"p"},"**")," wildcard can be useful in combination with ORMs like MikroORM and TypeORM which offer ways to define relations that should be ",Object(s.b)("inlineCode",{parentName:"p"},"JOIN"),"ed as part of the initial ",Object(s.b)("inlineCode",{parentName:"p"},"SELECT")," query."))),Object(s.b)("h3",{id:"-3"},Object(s.b)("inlineCode",{parentName:"h3"},"**.**")),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"**.**")," follows the same patterns as we've been seeing so far, ",Object(s.b)("inlineCode",{parentName:"p"},"**")," filters fields with subselections, and by adding ",Object(s.b)("inlineCode",{parentName:"p"},".**"),", goes to unlimited depths:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-ts"},'import { resolveSelections, FieldSelections } from "@jenyus-org/graphql-utils";\n\nconst resolvers = {\n  Query: {\n    posts(_, __, ___, info) {\n      const fields: FieldSelections[] = [\n        {\n          field: "posts",\n          selections: ["**.**"],\n        },\n      ];\n\n      const selections = resolveSelections(fields, info);\n\n      console.log(selections);\n    },\n  },\n};\n')),Object(s.b)("p",null,"This will log the following:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'["author"]\n')),Object(s.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(s.b)("div",{parentName:"div",className:"admonition-heading"},Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",{parentName:"h5",className:"admonition-icon"},Object(s.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(s.b)("div",{parentName:"div",className:"admonition-content"},Object(s.b)("p",{parentName:"div"},"The ",Object(s.b)("inlineCode",{parentName:"p"},"**.**")," wildcard can be useful in combination with ORMs like MikroORM and TypeORM which offer ways to define relations that should be ",Object(s.b)("inlineCode",{parentName:"p"},"JOIN"),"ed as part of the initial ",Object(s.b)("inlineCode",{parentName:"p"},"SELECT")," query."))),Object(s.b)("h3",{id:"-4"},Object(s.b)("inlineCode",{parentName:"h3"},"*.")),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"*.")," is the equivalent of ",Object(s.b)("inlineCode",{parentName:"p"},"**"),", but for fields without subselections.:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-ts"},'import { resolveSelections, FieldSelections } from "@jenyus-org/graphql-utils";\n\nconst resolvers = {\n  Query: {\n    posts(_, __, ___, info) {\n      const fields: FieldSelections[] = [\n        {\n          field: "posts",\n          selections: ["*."],\n        },\n      ];\n\n      const selections = resolveSelections(fields, info);\n\n      console.log(selections);\n    },\n  },\n};\n')),Object(s.b)("p",null,"This will log the following:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'["id", "title", "body"]\n')),Object(s.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(s.b)("div",{parentName:"div",className:"admonition-heading"},Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",{parentName:"h5",className:"admonition-icon"},Object(s.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(s.b)("div",{parentName:"div",className:"admonition-content"},Object(s.b)("p",{parentName:"div"},"The ",Object(s.b)("inlineCode",{parentName:"p"},"*.*")," wildcard can be useful to get the columns we need to ",Object(s.b)("inlineCode",{parentName:"p"},"SELECT")," from our database."))),Object(s.b)("h2",{id:"usage-with-mikroorm"},"Usage with MikroORM"),Object(s.b)("p",null,"ORMs like MikroORM and TypeORM offer powerful features to define the database columns and relationships that should be requested. This allows them to generate very efficient queries and limit the number of trips we make to our database."),Object(s.b)("p",null,"In combination with the ",Object(s.b)("inlineCode",{parentName:"p"},"resolveSelections()")," utility, and wildcards outlined above, we can limit our queries to only the data we need, and MikroORM even supports ",Object(s.b)("a",{parentName:"p",href:"https://mikro-orm.io/docs/nested-populate"},"Smart Nested Populate")," which allows relationships to be loaded at deeper levels allowing us to use the ",Object(s.b)("inlineCode",{parentName:"p"},"**.**")," wildcard:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-ts"},'import { resolveSelections, FieldSelections } from "@jenyus-org/graphql-utils";\n\nconst resolvers = {\n  Query: {\n    posts(_, { postsRepository }, ___, info) {\n      const fieldSelections: FieldSelections[] = [\n        {\n          field: "posts",\n          selections: ["*."],\n        },\n      ];\n\n      const fields = resolveSelections(fieldSelections, info);\n\n      const relationSelections: FieldSelections[] = [\n        {\n          field: "posts",\n          selections: ["**.**"],\n        },\n      ];\n\n      const relations = resolveSelections(relationSelections, info);\n\n      return postsRepository.find({}, { populate: relations, fields });\n    },\n  },\n};\n')),Object(s.b)("div",{className:"admonition admonition-info alert alert--info"},Object(s.b)("div",{parentName:"div",className:"admonition-heading"},Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",{parentName:"h5",className:"admonition-icon"},Object(s.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(s.b)("div",{parentName:"div",className:"admonition-content"},Object(s.b)("p",{parentName:"div"},"You can read more about the MikrORM ",Object(s.b)("inlineCode",{parentName:"p"},"EntityManager"),"/",Object(s.b)("inlineCode",{parentName:"p"},"EntityRepository")," ",Object(s.b)("inlineCode",{parentName:"p"},"populate")," and ",Object(s.b)("inlineCode",{parentName:"p"},"fields")," options in their ",Object(s.b)("a",{parentName:"p",href:"https://mikro-orm.io/docs/entity-manager-api"},"docs"),"."))))}p.isMDXComponent=!0},89:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return u}));var i=t(0),o=t.n(i);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},s=Object.keys(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=o.a.createContext({}),p=function(e){var n=o.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=p(e.components);return o.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},m=o.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,u=d["".concat(l,".").concat(m)]||d[m]||b[m]||s;return t?o.a.createElement(u,a(a({ref:n},c),{},{components:t})):o.a.createElement(u,a({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,l=new Array(s);l[0]=m;var a={};for(var r in n)hasOwnProperty.call(n,r)&&(a[r]=n[r]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var c=2;c<s;c++)l[c]=t[c];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);